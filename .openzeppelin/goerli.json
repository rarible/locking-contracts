{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x81C89D33681b8e4e7e35a8E1F2aBBc3B0438618A",
    "txHash": "0xead137e13caf0ea44c5e7e089b74085a1ec735178ecbbbb777848f434d4e51a4"
  },
  "proxies": [
    {
      "address": "0xfeC0F8d936B9cBa92a332bCB06dC7DF4DdE0c253",
      "txHash": "0x6958a7e690f57f299b213180b11ed2de899eed5580342dd311bbb6f09456a59e",
      "kind": "transparent"
    },
    {
      "address": "0x7c4B13B5893cD82f371c5e28f12FB2F37542BbC5",
      "txHash": "0x074b1e04be67e54da0a1747493e1047ad040274267ce3f79bca72dedad516af6",
      "kind": "transparent"
    },
    {
      "address": "0xFAe20376790675B36030118cF2D8d41ffC0D981D",
      "txHash": "0x09e8107d7b98c77db4bd0165d5ce0618fdafe6369485a637372466312a219c23",
      "kind": "transparent"
    },
    {
      "address": "0x02afbD43cAD367fcB71305a2dfB9A3928218f0c1",
      "txHash": "0xf7663e10c1992e8dc201aeeed7f713d96b5a29021f2baa17c7b94436faa42df9",
      "kind": "transparent"
    },
    {
      "address": "0xD8560C88D1DC85f9ED05b25878E366c49B68bEf9",
      "txHash": "0x204647a444728dc0f00fb270bc5f96aab00f6293580592add2567f07dc0765dd",
      "kind": "transparent"
    },
    {
      "address": "0x5A3bc320a4b7E4Bd0aa0fc2cFFF1283980Ace37B",
      "txHash": "0x5010e78681265c05487d67f5ff9d56c0220f6371834f14b9d4955f03674a3b42",
      "kind": "transparent"
    },
    {
      "address": "0x6D5E228C25730502aF5ACffa2eB34956c33ad7C2",
      "txHash": "0xcbd02703780629322ac77dce4ccfa576a91f9de1235abc0e145acb2f97657db8",
      "kind": "transparent"
    },
    {
      "address": "0x1774A96fc8e8cAb040766d81E839685203a8Da88",
      "txHash": "0x107f14b775e854ad35b0db461aa3fc0f8b1976f664b7adf28237ac2151fb92b0",
      "kind": "transparent"
    },
    {
      "address": "0x1F290542b3D10A70341aabc593281fF48032a8Eb",
      "txHash": "0xc56e780ac1103ba0277a062dc0793e9ef227d9e8cbc83c11d38c3aab4a63b552",
      "kind": "transparent"
    },
    {
      "address": "0x6F6d9A588a94E053c58210d3A8e03c91779B6af5",
      "txHash": "0xd31a62144e088a066a6a29ef8615044d9ec86ed46b4246a62cdc94077fa9edb1",
      "kind": "transparent"
    },
    {
      "address": "0x6AeD20c7e6064E5C03A47886380943b53A372191",
      "txHash": "0xb4d24a9941e7cb27044b1aa5bd20aed7c1ffce99d35d9cb5bb5b5dafc3660a60",
      "kind": "transparent"
    },
    {
      "address": "0x39C9D13e1b17Bf1975aFe892e18B1D5A1482b52D",
      "txHash": "0xfe78fb4e6c6a7de3a727ce00739b69060260ce98cea80570eafac6d649ecea38",
      "kind": "transparent"
    },
    {
      "address": "0xD335eEc939Ff164AF82e2ab97B6c16380308eCEB",
      "txHash": "0x5e17cd42839850ed9f6a3420438232231ed395fbc84ede5453c958353b8b0819",
      "kind": "transparent"
    }
  ],
  "impls": {
    "83e0e7ecba7386817e24686fe2af484f112453980ebb9414bcbcd165d6cc2084": {
      "address": "0xA74E313D26Bf99e0b10CCe6471696334f0C6B536",
      "txHash": "0x458daadb0f0c38104e78c9747aea04a347469a540532bfe35b964196dabddd42",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByTokenAndTokenId",
            "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)13355_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:29"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByToken",
            "type": "t_mapping(t_address,t_struct(RoyaltiesSet)13355_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:31"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesProviders",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:33"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:250"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(RoyaltiesSet)13355_storage)": {
            "label": "mapping(bytes32 => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoyaltiesSet)13355_storage": {
            "label": "struct RoyaltiesRegistry.RoyaltiesSet",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "royalties",
                "type": "t_array(t_struct(Part)12647_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Part)12647_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)12647_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_address,t_struct(RoyaltiesSet)13355_storage)": {
            "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "5b2a738c65d9d40f4a45045c905de209cb06f467b76cbfb902984670083905b9": {
      "address": "0x7dE673c34DcE4BE7D9Dad99a465Bb1F3F380BE6B",
      "txHash": "0x30a4242005a80612724bc166cb019aa191852657d7039803aaaa2d4cadc9b7a5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:149"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:89"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)12647_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)12647_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "6b32f8589b3eb685910a619972301af7f45f80525e9458efd3e3ff11aa662a30": {
      "address": "0xF3435DE8cba4258d112Af7A66A90f63Cb5F4dc07",
      "txHash": "0xaf718843ed32133e60abe46d729a32296525e0496a98d4af22f52e6d21906520",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2748_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2125_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:8"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:115"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Base.sol:38"
          },
          {
            "contract": "ERC721Rarible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Rarible.sol:34"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)12647_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)12647_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)2748_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2748_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2362_storage"
              }
            ]
          },
          "t_struct(Set)2362_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2125_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1807_storage"
              }
            ]
          },
          "t_struct(Map)1807_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1799_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1799_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1799_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "93416679cdd55123a039edd66e656c75c1c6dcc885cfaae3eacc0a2bc6d86d26": {
      "address": "0xf30164549131d020b477714d55E6BFa5e2970DEf",
      "txHash": "0x367067f37223e9a6d19de261b95c91341491bbb38a5e40dd725339c5dc12e178",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AssetMatcher",
            "label": "matchers",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:13"
          },
          {
            "contract": "AssetMatcher",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:77"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/exchange-v2/contracts/OrderValidator.sol:52"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "fills",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:23"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:442"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7792",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:259"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IRoyaltiesProvider)7792": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4697cfc7075802b8e96416eac037ba3e9ae69b1de71ed97487b06a688b13081c": {
      "address": "0xbA9a1586446F45D87bb9dFCcbf052a06e66AE08f",
      "txHash": "0x3b3495bab87a46eff08a5e42b658095c364f4747e317ec0e3ad7ce740361cc32",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:23"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:26"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:29"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:32"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:35"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:38"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:66"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:443"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:8"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol:41"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721URI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:19"
          },
          {
            "contract": "ERC721URI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:22"
          },
          {
            "contract": "ERC721URI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:92"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:23"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:113"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721BaseMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol:45"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)12647_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)12647_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)12647_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "b032119a0be00b336cf53f37b358531c69953c6964f71f231c5d08cfc4f2fc7d": {
      "address": "0xCd3f1CB4a3f9AaB73919AE0c6C9D343D81aba4e3",
      "txHash": "0xb4e83af51b0fe0f1aec6f4148ee1281eb3eb1ad1c3ef5146417c956391e170e2",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "TokenToAuction",
            "label": "tokenToAuctionId",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:7"
          },
          {
            "contract": "TokenToAuction",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/wrapper/TokenToAuction.sol:24"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7792",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:259"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase721",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)6370_storage)",
            "src": "../@rarible/auction/contracts/721/AuctionHouseBase721.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)6370_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase721.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)6370_storage": {
            "label": "struct AuctionHouseBase721.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6432_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6432_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)7792": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "15a3d0a4cd624f00b1a1d66710771bf691a239c1574b46178dc9da6b90f4916a": {
      "address": "0xC43af843d386d4A4cEb44FbBe51bcd4Bc0d8d77d",
      "txHash": "0xf52c190e40f70f648e6907f078f24dcbe076c98cfb3973b9f34ade9026ba273d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155ReceiverUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155ReceiverUpgradeable.sol:24"
          },
          {
            "contract": "ERC1155HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155HolderUpgradeable.sol:27"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)7792",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:259"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "readyToWithdraw",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:32"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "auctionId",
            "type": "t_uint256",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:35"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalDuration",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:38"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "minimalStepBasePoint",
            "type": "t_uint96",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:41"
          },
          {
            "contract": "AuctionHouseBase",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/auction/contracts/AuctionHouseBase.sol:290"
          },
          {
            "contract": "AuctionHouseBase1155",
            "label": "auctions",
            "type": "t_mapping(t_uint256,t_struct(Auction)5303_storage)",
            "src": "../@rarible/auction/contracts/1155/AuctionHouseBase1155.sol:10"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_struct(Auction)5303_storage)": {
            "label": "mapping(uint256 => struct AuctionHouseBase1155.Auction)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Auction)5303_storage": {
            "label": "struct AuctionHouseBase1155.Auction",
            "members": [
              {
                "label": "sellToken",
                "type": "t_address"
              },
              {
                "label": "sellTokenValue",
                "type": "t_uint96"
              },
              {
                "label": "sellTokenId",
                "type": "t_uint256"
              },
              {
                "label": "buyAsset",
                "type": "t_address"
              },
              {
                "label": "endTime",
                "type": "t_uint96"
              },
              {
                "label": "lastBid",
                "type": "t_struct(Bid)6432_storage"
              },
              {
                "label": "seller",
                "type": "t_address_payable"
              },
              {
                "label": "minimalPrice",
                "type": "t_uint96"
              },
              {
                "label": "buyer",
                "type": "t_address_payable"
              },
              {
                "label": "protocolFee",
                "type": "t_uint64"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address": {
            "label": "address"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_struct(Bid)6432_storage": {
            "label": "struct AuctionHouseBase.Bid",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "dataType",
                "type": "t_bytes4"
              },
              {
                "label": "data",
                "type": "t_bytes_storage"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bytes_storage": {
            "label": "bytes"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_contract(IRoyaltiesProvider)7792": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "53e6814ba68d19c12c79120f9aff5f463e4e3427117133b9d380ac7a2a9a2308": {
      "address": "0x3eC7b42959Dd82C9211ab7736094EF0C33d50b7E",
      "txHash": "0xfb99da3cb86ead7cf0d59d3a3f87da80e48887bc34f77bd9c3bd28e4bb40a5cc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "../@rarible/locking/contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)16089_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)16082_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)17301_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:253"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingRelock.sol:83"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/Locking.sol:161"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)16089_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)16089_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)17301_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)17301_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)17301_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)17286_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)17281_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)17286_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)17286_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)17281_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)17281_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)16082_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)16082_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "c123da6b87d349ecdb97d92dd7193c1cb9f981bff823dfb7e0d1e3a684e60602": {
      "address": "0xfE3f7D0Fa7193898Bfd130C00d12c0bA65a35CB1",
      "txHash": "0xd6d5769dba43997cd58b597b095d5d101dd2cf5060e1a91b65eedcd624449863",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "../@rarible/locking/contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)16655_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)16648_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)18069_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:272"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingRelock.sol:83"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/Locking.sol:161"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)16655_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)16655_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)18069_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)18069_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)18069_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)18054_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)18049_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)18054_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)18054_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)18049_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)18049_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)16648_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)16648_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "aa19b381c81034fb45c7506b1d4b13622f21dccecd7b83e7a532900e5f8d6d14": {
      "address": "0x29b82781784dEA086402054Fb8686497e0e049B1",
      "txHash": "0x0a3b81a769c83015675de0c0827761d57e95090ddeb8db00260825b91c7d2a6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RariMineV3",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:27"
          },
          {
            "contract": "RariMineV3",
            "label": "tokenOwner",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:28"
          },
          {
            "contract": "RariMineV3",
            "label": "locking",
            "type": "t_contract(ILocking)15239",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:29"
          },
          {
            "contract": "RariMineV3",
            "label": "claimFormulaClaim",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:31"
          },
          {
            "contract": "RariMineV3",
            "label": "claimCliffWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:32"
          },
          {
            "contract": "RariMineV3",
            "label": "claimSlopeWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:33"
          },
          {
            "contract": "RariMineV3",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:38"
          },
          {
            "contract": "RariMineV3",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:158"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ILocking)15239": {
            "label": "contract ILocking"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "37e4ff1d5e967e882cc6b3f0f395f15048c82ed730b51cbcd56596597da5c9f6": {
      "address": "0xb1455e560e87B649508eB1C1362ECA63e9527820",
      "txHash": "0x93ab25118131908f8c7cd36b78b58eac4cae1fa20b95a5c0d21d83744070b43c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "../@rarible/locking/contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)16652_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)16645_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)18076_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:273"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingRelock.sol:86"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/Locking.sol:160"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)16652_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)16652_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)18076_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)18076_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)18076_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)18061_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)18056_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)18061_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)18061_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)18056_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)18056_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)16645_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)16645_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "700b12aff8df3c33f18b40e64108b117f8e26ab10461161d8eb7f5f4eb7f87d0": {
      "address": "0x8c551CF40432562983c0D9730Dd1E9e2895a9E32",
      "txHash": "0xcabc572af8c36bc98e70f74ef80be541248e97595aaff1460aae18317ff1d332",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RariMineV3",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:27"
          },
          {
            "contract": "RariMineV3",
            "label": "tokenOwner",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:28"
          },
          {
            "contract": "RariMineV3",
            "label": "locking",
            "type": "t_contract(ILocking)15239",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:29"
          },
          {
            "contract": "RariMineV3",
            "label": "claimFormulaClaim",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:31"
          },
          {
            "contract": "RariMineV3",
            "label": "claimCliffWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:32"
          },
          {
            "contract": "RariMineV3",
            "label": "claimSlopeWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:33"
          },
          {
            "contract": "RariMineV3",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:38"
          },
          {
            "contract": "RariMineV3",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:161"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ILocking)15239": {
            "label": "contract ILocking"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "61d5916138b5005a8be24aaf15116ff32aa7086cb899bcea42a6cbc89b720748": {
      "address": "0x252b444CA1C9BA4063ebE5f2137942283f59762f",
      "txHash": "0x76a9f49d9f602ac62b78818b94773b9dd29bdee5b945562fe0a337e52a1f4946",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "../@rarible/locking/contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)16652_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)16645_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)18076_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:273"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingRelock.sol:86"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/Locking.sol:160"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)16652_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)16652_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)18076_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)18076_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)18076_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)18061_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)18056_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)18061_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)18061_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)18056_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)18056_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)16645_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)16645_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "0dbc1d9bb3a196ac3a60329535151f98fb5f1acf01b4b7bcf4a6b8acbfff4403": {
      "address": "0x8353cdCCB1CEA79Fc50549de1faeACEd08953a5e",
      "txHash": "0x16dfe0e08fc7484b0229986e66a68318597602d1f67449bd021a3a5fdcfd8647",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RariMineV3",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:27"
          },
          {
            "contract": "RariMineV3",
            "label": "tokenOwner",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:28"
          },
          {
            "contract": "RariMineV3",
            "label": "locking",
            "type": "t_contract(ILocking)15239",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:29"
          },
          {
            "contract": "RariMineV3",
            "label": "claimFormulaClaim",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:31"
          },
          {
            "contract": "RariMineV3",
            "label": "claimCliffWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:32"
          },
          {
            "contract": "RariMineV3",
            "label": "claimSlopeWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:33"
          },
          {
            "contract": "RariMineV3",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:38"
          },
          {
            "contract": "RariMineV3",
            "label": "signer",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:172"
          },
          {
            "contract": "RariMineV3",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:170"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ILocking)15239": {
            "label": "contract ILocking"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a1960a615557eb217db4423cd49edc5db90de513549f05b8c5059f8f5bd2ffd1": {
      "address": "0x0B2F9310B9C74364AF61c9c4339A5ad360E7eA06",
      "txHash": "0x1ddcce480d7bd8dfa5b8608965bc17858e3286946446550f70691de6361ab046",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RariMineV3",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:27"
          },
          {
            "contract": "RariMineV3",
            "label": "tokenOwner",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:28"
          },
          {
            "contract": "RariMineV3",
            "label": "locking",
            "type": "t_contract(ILocking)15239",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:29"
          },
          {
            "contract": "RariMineV3",
            "label": "claimFormulaClaim",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:31"
          },
          {
            "contract": "RariMineV3",
            "label": "claimCliffWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:32"
          },
          {
            "contract": "RariMineV3",
            "label": "claimSlopeWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:33"
          },
          {
            "contract": "RariMineV3",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:38"
          },
          {
            "contract": "RariMineV3",
            "label": "signer",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:40"
          },
          {
            "contract": "RariMineV3",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:170"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ILocking)15239": {
            "label": "contract ILocking"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "646292a924b56dd4d76afece56d78578b2e90e2dcddd6d0f86c6273a44f6f4a2": {
      "address": "0x8ABE09c2567846571F3fA3538Df53d2b9614dF4d",
      "txHash": "0xedc45cb9a00d412cbd33a5505842692b1be43910df178886101fc34abe6e030d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "../@rarible/locking/contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "../@rarible/locking/contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)14372_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)14365_storage)",
            "src": "../@rarible/locking/contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)16366_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)48_storage",
            "src": "../@rarible/locking/contracts/LockingBase.sol:277"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingRelock.sol:86"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/locking/contracts/Locking.sol:164"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)14372_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)14372_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)16366_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)16366_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)16366_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)16351_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)16346_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)16351_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)16351_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)16346_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)16346_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)14365_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)14365_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "35e3239f16ef2b80369f71e30acfa769f68249119b13f541324e3694843319f3": {
      "address": "0xbC3866B88636FC000D73720422D7Dc18749cF051",
      "txHash": "0xf9943111da34e6f6ff4b1e2aa229f18948a828fab3eeb8001ce2070d7576f8c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "LockingBase",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1440",
            "src": "contracts/LockingBase.sol:31"
          },
          {
            "contract": "LockingBase",
            "label": "counter",
            "type": "t_uint256",
            "src": "contracts/LockingBase.sol:35"
          },
          {
            "contract": "LockingBase",
            "label": "stopped",
            "type": "t_bool",
            "src": "contracts/LockingBase.sol:40"
          },
          {
            "contract": "LockingBase",
            "label": "migrateTo",
            "type": "t_address",
            "src": "contracts/LockingBase.sol:45"
          },
          {
            "contract": "LockingBase",
            "label": "minCliffPeriod",
            "type": "t_uint256",
            "src": "contracts/LockingBase.sol:51"
          },
          {
            "contract": "LockingBase",
            "label": "minSlopePeriod",
            "type": "t_uint256",
            "src": "contracts/LockingBase.sol:56"
          },
          {
            "contract": "LockingBase",
            "label": "startingPointWeek",
            "type": "t_uint256",
            "src": "contracts/LockingBase.sol:61"
          },
          {
            "contract": "LockingBase",
            "label": "accountsOld",
            "type": "t_mapping(t_address,t_struct(AccountOld)14372_storage)",
            "src": "contracts/LockingBase.sol:83"
          },
          {
            "contract": "LockingBase",
            "label": "locks",
            "type": "t_mapping(t_uint256,t_struct(Lock)14365_storage)",
            "src": "contracts/LockingBase.sol:84"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLineOld",
            "type": "t_struct(BrokenLineOld)16366_storage",
            "src": "contracts/LockingBase.sol:85"
          },
          {
            "contract": "LockingBase",
            "label": "accounts",
            "type": "t_mapping(t_address,t_struct(Account)1652_storage)",
            "src": "contracts/LockingBase.sol:90"
          },
          {
            "contract": "LockingBase",
            "label": "totalSupplyLine",
            "type": "t_struct(BrokenLine)3641_storage",
            "src": "contracts/LockingBase.sol:91"
          },
          {
            "contract": "LockingBase",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "contracts/LockingBase.sol:277"
          },
          {
            "contract": "LockingRelock",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/LockingRelock.sol:86"
          },
          {
            "contract": "LockingVotes",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/LockingVotes.sol:69"
          },
          {
            "contract": "Locking",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "contracts/Locking.sol:164"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IERC20Upgradeable)1440": {
            "label": "contract IERC20Upgradeable"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(Account)14372_storage)": {
            "label": "mapping(address => struct LockingBase.Account)"
          },
          "t_struct(Account)14372_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)16366_storage"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)16366_storage"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(BrokenLine)16366_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineData)16351_storage)"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)16346_storage"
              }
            ]
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_struct(LineData)16351_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineData)"
          },
          "t_struct(LineData)16351_storage": {
            "label": "struct LibBrokenLine.LineData",
            "members": [
              {
                "label": "line",
                "type": "t_struct(Line)16346_storage"
              },
              {
                "label": "cliff",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Line)16346_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "bias",
                "type": "t_uint256"
              },
              {
                "label": "slope",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Lock)14365_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)"
          },
          "t_struct(Lock)14365_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address"
              },
              {
                "label": "delegate",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          }
        }
      }
    },
    "8153fea5a90ea7062d1931606ef611d8fd862e27a85d383162f3da112d7702a1": {
      "address": "0x3a25CE5a44c6517dc9A0550E50e2dA8395e3413d",
      "txHash": "0x29571ad7a10fadad874210ffbcb2a0e2def39bd036a1f43e9047b10af290c53c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RariMineV3",
            "label": "token",
            "type": "t_contract(IERC20Upgradeable)1367",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:27"
          },
          {
            "contract": "RariMineV3",
            "label": "tokenOwner",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:28"
          },
          {
            "contract": "RariMineV3",
            "label": "locking",
            "type": "t_contract(ILocking)13295",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:29"
          },
          {
            "contract": "RariMineV3",
            "label": "claimFormulaClaim",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:31"
          },
          {
            "contract": "RariMineV3",
            "label": "claimCliffWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:32"
          },
          {
            "contract": "RariMineV3",
            "label": "claimSlopeWeeks",
            "type": "t_uint256",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:33"
          },
          {
            "contract": "RariMineV3",
            "label": "claimed",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:38"
          },
          {
            "contract": "RariMineV3",
            "label": "signer",
            "type": "t_address",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:40"
          },
          {
            "contract": "RariMineV3",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/locking/contracts/RariMineV3.sol:170"
          }
        ],
        "types": {
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable"
          },
          "t_address": {
            "label": "address"
          },
          "t_contract(ILocking)13295": {
            "label": "contract ILocking"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "3c7276b9127b9efad7eb7eed26a7cb53bf19a65b9458c6dcd18a692806ca899b": {
      "address": "0xcaffBab5dA280F2839ed257aBB699d7DF7954d7f",
      "txHash": "0x55eab7d46b97b186ba79f5c03526d9b51a97c4a8d0a8a8ea97862dd5497cd923",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:150"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:89"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)13056_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)13056_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "71df619d8fb471c6f83e61edd9c543b758d36ed998f3102e4c912ff78a89ed07": {
      "address": "0x93cb971BD3e25eA739fF603b99c0F45FfA19B3BD",
      "txHash": "0xce99950adc2f1d28d06d7337da9bb6953accf950462d6233c6fe5557da46ce9b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:23"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:26"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:29"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:32"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:35"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:38"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:66"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721UpgradeableMinimal.sol:443"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:8"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol:41"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721URI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:19"
          },
          {
            "contract": "ERC721URI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:22"
          },
          {
            "contract": "ERC721URI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:92"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:23"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:114"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721BaseMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol:45"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:54"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)13056_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)13056_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "3ebb4bfbdfb28399aed5a83312f789c875713204b188f4cc56325c316dd646b4": {
      "address": "0xe160844e7A8a9817d76C6e12DF9Ba5FF65182549",
      "txHash": "0x0980b83cb9bccb4e026261f9162eed7c48be98a6a9a3ca551c29c09b44ba548c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2854_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)2231_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:8"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:116"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Base.sol:38"
          },
          {
            "contract": "ERC721Rarible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Rarible.sol:34"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)13056_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)13056_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)13056_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)2854_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2854_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2468_storage"
              }
            ]
          },
          "t_struct(Set)2468_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)2231_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1913_storage"
              }
            ]
          },
          "t_struct(Map)1913_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1905_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1905_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1905_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5ab6de2c5f916c3d64e33b3a2c45e885a08df04fd6fe31273c9b8906cb1a5e26": {
      "address": "0xDB58579aD18C9C98e9B8575e04f5b7F709571A79",
      "txHash": "0xefcaf16d9ece286a3a088377a2052fb57ce9a8d76a991ca88f7ae2ac9e28a9a4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AssetMatcher",
            "label": "matchers",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:13"
          },
          {
            "contract": "AssetMatcher",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:77"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:19"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/transfer-manager/contracts/TransferExecutor.sol:74"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/exchange-v2/contracts/OrderValidator.sol:50"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "fills",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:23"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:442"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)8428",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:28"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/transfer-manager/contracts/RaribleTransferManager.sol:260"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IRoyaltiesProvider)8428": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "cb93c0cb92f01451f21bd7e6c1d1313cbfa48f127c4ab90a657ab148635d8eee": {
      "address": "0xF79cfD4f9B491e5Dce87eC84E1A7A456ebE32d0f",
      "txHash": "0x9011e9f053f39ea377a387d83e4e2f935bf1ed8dc8746755dce6ea0a84010152",
      "layout": {
        "solcVersion": "0.8.17",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "101",
            "type": "t_contract(IERC20Upgradeable)378",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:28"
          },
          {
            "label": "counter",
            "offset": 0,
            "slot": "102",
            "type": "t_uint256",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:32"
          },
          {
            "label": "stopped",
            "offset": 0,
            "slot": "103",
            "type": "t_bool",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:37"
          },
          {
            "label": "migrateTo",
            "offset": 1,
            "slot": "103",
            "type": "t_address",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:42"
          },
          {
            "label": "minCliffPeriod",
            "offset": 0,
            "slot": "104",
            "type": "t_uint256",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:48"
          },
          {
            "label": "minSlopePeriod",
            "offset": 0,
            "slot": "105",
            "type": "t_uint256",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:53"
          },
          {
            "label": "startingPointWeek",
            "offset": 0,
            "slot": "106",
            "type": "t_uint256",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:58"
          },
          {
            "label": "accountsOld",
            "offset": 0,
            "slot": "107",
            "type": "t_mapping(t_address,t_struct(AccountOld)1630_storage)",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:80"
          },
          {
            "label": "locks",
            "offset": 0,
            "slot": "108",
            "type": "t_mapping(t_uint256,t_struct(Lock)1621_storage)",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:81"
          },
          {
            "label": "totalSupplyLineOld",
            "offset": 0,
            "slot": "109",
            "type": "t_struct(BrokenLineOld)3320_storage",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:82"
          },
          {
            "label": "accounts",
            "offset": 0,
            "slot": "115",
            "type": "t_mapping(t_address,t_struct(Account)1652_storage)",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:90"
          },
          {
            "label": "totalSupplyLine",
            "offset": 0,
            "slot": "116",
            "type": "t_struct(BrokenLine)3355_storage",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:91"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "120",
            "type": "t_array(t_uint256)43_storage",
            "contract": "LockingBase",
            "src": "contracts/LockingBase.sol:388"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)50_storage",
            "contract": "LockingRelock",
            "src": "contracts/LockingRelock.sol:80"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "213",
            "type": "t_array(t_uint256)50_storage",
            "contract": "LockingVotes",
            "src": "contracts/LockingVotes.sol:69"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)50_storage",
            "contract": "Locking",
            "src": "contracts/Locking.sol:161"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Point)3338_storage)dyn_storage": {
            "label": "struct LibBrokenLine.Point[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]",
            "numberOfBytes": "1376"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)378": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_int96": {
            "label": "int96",
            "numberOfBytes": "12"
          },
          "t_mapping(t_address,t_struct(Account)1652_storage)": {
            "label": "mapping(address => struct LockingBase.Account)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AccountOld)1630_storage)": {
            "label": "mapping(address => struct LockingBase.AccountOld)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_int256)": {
            "label": "mapping(uint256 => int256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_int96)": {
            "label": "mapping(uint256 => int96)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Line)3329_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.Line)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(LineDataOld)3303_storage)": {
            "label": "mapping(uint256 => struct LibBrokenLine.LineDataOld)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Lock)1621_storage)": {
            "label": "mapping(uint256 => struct LockingBase.Lock)",
            "numberOfBytes": "32"
          },
          "t_struct(Account)1652_storage": {
            "label": "struct LockingBase.Account",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLine)3355_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLine)3355_storage",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "amount",
                "type": "t_uint96",
                "offset": 0,
                "slot": "8"
              }
            ],
            "numberOfBytes": "288"
          },
          "t_struct(AccountOld)1630_storage": {
            "label": "struct LockingBase.AccountOld",
            "members": [
              {
                "label": "balance",
                "type": "t_struct(BrokenLineOld)3320_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "locked",
                "type": "t_struct(BrokenLineOld)3320_storage",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "12"
              }
            ],
            "numberOfBytes": "416"
          },
          "t_struct(BrokenLine)3355_storage": {
            "label": "struct LibBrokenLine.BrokenLine",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int96)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(Line)3329_storage)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "history",
                "type": "t_array(t_struct(Point)3338_storage)dyn_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "initial",
                "type": "t_struct(Line)3329_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(BrokenLineOld)3320_storage": {
            "label": "struct LibBrokenLine.BrokenLineOld",
            "members": [
              {
                "label": "slopeChanges",
                "type": "t_mapping(t_uint256,t_int256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "biasChanges",
                "type": "t_mapping(t_uint256,t_int256)",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "initiatedLines",
                "type": "t_mapping(t_uint256,t_struct(LineDataOld)3303_storage)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "initial",
                "type": "t_struct(LineOld)3297_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(Line)3329_storage": {
            "label": "struct LibBrokenLine.Line",
            "members": [
              {
                "label": "start",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "bias",
                "type": "t_uint96",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "slope",
                "type": "t_uint96",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "cliff",
                "type": "t_uint32",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(LineDataOld)3303_storage": {
            "label": "struct LibBrokenLine.LineDataOld",
            "members": [
              {
                "label": "line",
                "type": "t_struct(LineOld)3297_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "cliff",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(LineOld)3297_storage": {
            "label": "struct LibBrokenLine.LineOld",
            "members": [
              {
                "label": "start",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "bias",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "slope",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Lock)1621_storage": {
            "label": "struct LockingBase.Lock",
            "members": [
              {
                "label": "account",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "delegate",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Point)3338_storage": {
            "label": "struct LibBrokenLine.Point",
            "members": [
              {
                "label": "blockNumber",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "bias",
                "type": "t_uint96",
                "offset": 4,
                "slot": "0"
              },
              {
                "label": "slope",
                "type": "t_uint96",
                "offset": 16,
                "slot": "0"
              },
              {
                "label": "epoch",
                "type": "t_uint32",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_uint96": {
            "label": "uint96",
            "numberOfBytes": "12"
          }
        }
      }
    }
  }
}
